{
  "version": 3,
  "sources": ["../../../../../node_modules/localforage-cordovasqlitedriver/dist/localforage-cordovasqlitedriver.js"],
  "sourcesContent": ["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.cordovaSQLiteDriver = factory());\n}(this, (function () { 'use strict';\n\nfunction getSerializerPromise(localForageInstance) {\n    if (getSerializerPromise.result) {\n        return getSerializerPromise.result;\n    }\n    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n        return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n    getSerializerPromise.result = localForageInstance.getSerializer();\n    return getSerializerPromise.result;\n}\n\nfunction getDriverPromise(localForageInstance, driverName) {\n    getDriverPromise.result = getDriverPromise.result || {};\n    if (getDriverPromise.result[driverName]) {\n        return getDriverPromise.result[driverName];\n    }\n    if (!localForageInstance || typeof localForageInstance.getDriver !== 'function') {\n        return Promise.reject(new Error('localforage.getDriver() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n    getDriverPromise.result[driverName] = localForageInstance.getDriver(driverName);\n    return getDriverPromise.result[driverName];\n}\n\nfunction getWebSqlDriverPromise(localForageInstance) {\n    return getDriverPromise(localForageInstance, localForageInstance.WEBSQL);\n}\n\n/* global document, sqlitePlugin */\n// we can't import this, since it gets defined later\n// import sqlitePlugin from 'sqlitePlugin';\n\nvar deviceReady = new Promise(function (resolve, reject) {\n    if (typeof sqlitePlugin !== 'undefined') {\n        resolve();\n    } else if (typeof cordova === 'undefined') {\n        reject(new Error('cordova is not defined.'));\n    } else {\n        // Wait for Cordova to load\n        document.addEventListener(\"deviceready\", function () {\n            return resolve();\n        }, false);\n    }\n});\n\nvar deviceReadyDone = deviceReady.catch(function () {\n    return Promise.resolve();\n});\n\nfunction getOpenDatabasePromise() {\n    return deviceReadyDone.then(function () {\n        if (typeof sqlitePlugin !== 'undefined' && typeof sqlitePlugin.openDatabase === 'function') {\n            return sqlitePlugin.openDatabase;\n        } else {\n            throw new Error('SQLite plugin is not present.');\n        }\n    });\n}\n\n/*\n * Includes code from:\n *\n * localForage - websql driver\n * https://github.com/mozilla/localforage\n *\n * Copyright (c) 2015 Mozilla\n * Licensed under Apache 2.0 license.\n *\n */\n// import localforage from 'localforage';\n// // If cordova is not present, we can stop now.\n// if (!globalObject.cordova) {\n//     return;\n// }\n\n// Open the cordova sqlite plugin database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = getOpenDatabasePromise().then(function (openDatabase) {\n        return new Promise(function (resolve, reject) {\n            // Open the database; the openDatabase API will automatically\n            // create it for us if it doesn't exist.\n            try {\n                dbInfo.location = dbInfo.location || 'default';\n                dbInfo.db = openDatabase({\n                    name: dbInfo.name,\n                    version: String(dbInfo.version),\n                    description: dbInfo.description,\n                    size: dbInfo.size,\n                    key: dbInfo.dbKey,\n                    location: dbInfo.location\n                });\n            } catch (e) {\n                reject(e);\n            }\n\n            // Create our key/value table if it doesn't exist.\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                    self._dbInfo = dbInfo;\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        });\n    });\n\n    var serializerPromise = getSerializerPromise(self);\n    var webSqlDriverPromise = getWebSqlDriverPromise(self);\n\n    return Promise.all([serializerPromise, webSqlDriverPromise, dbInfoPromise]).then(function (results) {\n        dbInfo.serializer = results[0];\n        return dbInfoPromise;\n    });\n}\n\nvar cordovaSQLiteDriver = {\n    _driver: 'cordovaSQLiteDriver',\n    _initStorage: _initStorage,\n    _support: function _support() {\n        return getOpenDatabasePromise().then(function (openDatabase) {\n            return !!openDatabase;\n        }).catch(function () {\n            return false;\n        });\n    }\n};\n\nfunction wireUpDriverMethods(driver) {\n    var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem', 'dropInstance'];\n\n    function wireUpDriverMethod(driver, methodName) {\n        driver[methodName] = function () {\n            var localForageInstance = this;\n            var args = arguments;\n            return getWebSqlDriverPromise(localForageInstance).then(function (webSqlDriver) {\n                return webSqlDriver[methodName].apply(localForageInstance, args);\n            });\n        };\n    }\n\n    for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n        wireUpDriverMethod(driver, LibraryMethods[i]);\n    }\n}\n\nwireUpDriverMethods(cordovaSQLiteDriver);\n\nreturn cordovaSQLiteDriver;\n\n})));\n"],
  "mappings": "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",
  "names": ["t", "driver"]
}
